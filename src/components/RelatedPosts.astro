---
// RelatedPosts.astro - Display related blog posts based on tags or categories
import { getCollection } from 'astro:content';
import FormattedDate from './FormattedDate.astro';

const { currentPost, tags = [], limit = 3 } = Astro.props;

// Get all blog posts
const allPosts = await getCollection('blog');

// Headers by language
const headerText = {
  'en': 'You Might Also Like',
  'ko': '함께 볼만한 글',
  'ja': 'おすすめの記事',
  'de': 'Das könnte Ihnen auch gefallen',
  'fr': 'Vous pourriez aussi aimer',
  'es': 'También podría interesarte',
  'cn': '您可能还喜欢'
};

// Function to score post relevance
function scoreRelevance(post, tags) {
  if (!post.data.title) return 0;
  
  let score = 0;
  const title = post.data.title.toLowerCase();
  
  // Score based on matching tags/keywords
  tags.forEach(tag => {
    if (post.data.tags && post.data.tags.includes(tag)) {
      score += 3; // Highest score for exact tag matches
    } else if (title.includes(tag.toLowerCase())) {
      score += 2; // Higher score for title matches
    }
  });
  
  return score;
}

// Get the language from a post ID
function getLanguageFromPostId(id) {
  if (!id) return 'en'; // Default to English
  const parts = id.split('/');
  // The language should be the first part of the ID
  return parts.length > 0 ? parts[0] : 'en';
}

// Determine the current language
const currentLanguage = getLanguageFromPostId(currentPost);

// Filter related posts to the same language as the current post
const relatedPosts = allPosts
  .filter(post => {
    return post.id !== currentPost && post.id.startsWith(currentLanguage + '/');
  })
  .map(post => ({
    ...post,
    relevanceScore: scoreRelevance(post, tags)
  }))
  .sort((a, b) => {
    if (b.relevanceScore !== a.relevanceScore) {
      return b.relevanceScore - a.relevanceScore;
    }
    // If same relevance, sort by date (newest first)
    return new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime();
  })
  .slice(0, limit);

// Get the localized header text based on current language
const header = headerText[currentLanguage] || headerText['en']; // Fallback to English
---

{relatedPosts.length > 0 && (
  <div class="related-posts">
    <h3 class="related-header">{header}</h3>
    <div class="related-grid">
      {relatedPosts.map(post => (
        <div class="related-post">
          <div class="related-post-content">
            <a href={`/blog/${post.id}`} class="related-title">
              {post.data.title}
            </a>
            <div class="related-date">
              <FormattedDate date={post.data.pubDate} />
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
)}

<style>
  .related-posts {
    margin-top: 4rem;
    padding-top: 2rem;
    border-top: 1px solid #eee;
  }
  
  .related-header {
    font-size: 1.5rem;
    font-weight: 600;
    margin-bottom: 1.5rem;
    color: #333;
  }
  
  .related-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
    gap: 1.5rem;
  }
  
  .related-post {
    background: #f8f9fa;
    border-radius: 8px;
    overflow: hidden;
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .related-post:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.05);
  }
  
  .related-post-content {
    padding: 1.2rem;
  }
  
  .related-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: #3498db;
    text-decoration: none;
    display: block;
    margin-bottom: 0.5rem;
    line-height: 1.4;
  }
  
  .related-date {
    font-size: 0.85rem;
    color: #666;
  }
  
  @media (max-width: 768px) {
    .related-grid {
      grid-template-columns: 1fr;
    }
  }
</style>